# python-mpdor

by Felipe Morales

2011/07/18

A mpd library, designed with ease of use in mind.

## Features

1. implements both a high-level and a low-level client.
2. gobject-based, for easy event handling (in the high-level client class).
3. adapts to the server capatibilities (adds and removes commands on
connection/disconnection, and on password changes).
4. simplified client setup (high-level class).

## Dependencies

1. `python-gobject`

## Examples

### client.Client

`mpdor.client.Client` implements a hight-level mpd client.

A simple script:

	import mpdor.client

	client = mpdor.client.Client()
	client.play()
	print mpdor.info.SongData(client.currentsong())
	client.next()

A console notification script:

	import gobject
	import mpdor

	def notify(client, vol):
		print "mpd volume is at ", vol + "%"

	client = mpdor.client.Client()
	client.connect("mixer-change", notify)
	gobject.MainLoop().run()

Subclassing `mpdor.client.Client` is preferred:
	
	import gobject
	from mpdor.client import Client
	try:
		from termcolor import colored
	except:
		colored = False

	class TestClient(Client):
		def on_player_song_start(self, client, songdata):
			if "artist" in songdata.__dict__:
				if colored:
					print colored(songdata.title, "white", attrs=("bold",)) + \
							" by " + colored(songdata.artist, "yellow", attrs=("bold",))
				else:
					print songdata.title + " by " + songdata.artist
			else:
				if colored:
					print colored(songdata.title, "white", attrs=("bold",))
				else:
					print songdata.title
		
		def on_idle_change(self, client, event): print "mpd event: @" + event
		def on_player_stopped(self, client): print "stopped"
		def on_player_paused(self, client): print "paused"
		def on_player_unpaused(self, client): print "unpaused"
		def on_mixer_change(self, client, vol): print "volume:", vol
		def on_player_seeked(self, client, pos): print "seeked:", pos
		def on_options_change(self, client, options): print options

	if __name__ == "__main__":
		t = TestClient()
		gobject.MainLoop().run()

### protocol.MPDProtocolClient

`python-mpdor` includes a low-level library for interacting with mpd, based on
the one on `python-mpd`. Its API is almost identical to the one of 
`python-mpd`. `client.Client` is based on this class.
	
	import gobject
	from mpdor.protocol import MPDProtocolClient
	try:
		from termcolor import colored
	except:
		colored = False

	def callback(source, condition):
		if colored:
			print colored("protocol:", "red", attrs=("bold",)), source._get_response()
		else:
			print "protocol:", source._get_response()
		source.idle()
		return True

	if __name__ == "__main__":
		c = MPDProtocolClient()
		c.connect_to_server("localhost", 6600)
		c.idle()
		gobject.io_add_watch(c, gobject.IO_IN, callback)
		gobject.MainLoop().run()
